Эссе на тему "отличия Trunk-based development от feature-подхода"

Модель работы Feature Branch Workflow предполагает наличие центрального репозитория, официальная история проекта представлена в ветке master. Вместо того, чтоб отправлять изменения сразу в локальную ветку master, каждый раз, начиная работу над новой функциональностью, разработчики создают новую ветку. Названия веток feature должны быть понятными, то есть должны давать представление о том, что разрабатывается на ветке. То есть, главное – создавать одну ветку для одной конкретной цели.
Кроме этого, ветки feature могут  отправляться в центральный репозиторий Git (push). Это позволяет дать доступ к функциональности другим разработчикам, не затрагивая официальный код. Так как master – единственная “особая” ветка, сохранение нескольких веток feature в центральном репозитории не вызывает проблем. И конечно, это удобно для отката локальных изменений. 

Однако есть проблемы долгоживущих веток
	•	Конфликты между коммитами (Merge hell). Откладывание релиза, интеграция с внешней системой, прочие внешние факторы могут привести код в нерабочее состояние.
	•	Трудности с шарингом кода. Другим членам команды может потребоваться код из новой ветки, если фичи зависят друг от друга. Приходится стартовать ещё одну ветку только ради доступа к этому коду.
	•	Проблемы тестового окружения. Если тестовый сервер один, а фиче-веток много, параллельно тестировать задачи не получится.
	•	Тяжело откатить изменения. Проблемы после релиза – обычное дело, и если из-за новой фиче-ветки начинаются сбои, разработчикам приходится выбирать между хотфиксом и ревертом, лезть в исходный код, заново выкладывать решение.

Чтобы не было этих проблем используют Trunk Based Development
Trunk Based Development – метод разработки кода на основе одной главной ветки. В отличие от подхода Gitflow, TBD позволяет разработчикам добавлять новые модули сразу в master. Второстепенные feature-ветки также могут создаваться, но они имеют короткий срок жизни.

Trunk Based Development предполагает только одну ветку для разработки, которая называется trunk. В любой момент эту ветку можно развернуть её на проде, а разработка, как и прежде, идёт в отдельных фича-ветках. Только теперь эти ветки живут не более двух дней, в отличие от feature-подхода

Все изменения в trunk вливаются через пул-реквесты. Изменения небольшие, поэтому процесс ревью не затягивается. Попадание нового кода в trunk запускает процессы автоматического билда, тестов и развёртывания на необходимые окружения.
